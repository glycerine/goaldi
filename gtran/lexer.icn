#  lexer.icn -- routines that do lexical analysis.

global lex_newline, lex_lineno, lex_coord_pos, lex_filename
record lex_coordinate(file, line, column)
record lex_TOK(sym, str, coord)

procedure yylex(getline)
    local last_pos, t, ptok
    static last_token

    initial {
        initialize()
    }

    lex_newline := &null
    lex_lineno := 0
    lex_filename := "<<stdin>>"

    "" ? {
        every t := lex_yylex0(getline) do {
            if \lex_newline then {
                lex_newline := &null
                if member(lex_ender_set,\last_token) then {
                #  if member(lex_ender_set,\last_token) &  member(lex_beginner_set,\t) then {
                    lex_SEMICOL.coord := lex_coordinate(lex_filename,
                                                        lex_lineno-1,
                                                        last_pos)
                    suspend lex_SEMICOL
                    last_token := lex_SEMICOL
                }
            }
            t.coord := lex_coordinate(lex_filename, lex_lineno, lex_coord_pos)
            last_pos := &pos
            suspend t
            last_token := t
        }
        ptok := lex_EOFX
        ptok.str := &null
        ptok.coord := lex_coordinate(lex_filename, lex_lineno, lex_coord_pos)
        last_pos := &pos
        suspend ptok
    }
end


procedure lex_yylex0(getline)
    local sym, str, op, ptok
    static let_und, let_und_dig, let_dig

    initial {
        let_und := &letters ++ '_'
        let_und_dig := &letters ++ '_' ++ &digits
        let_dig := &letters ++ &digits
    }

    repeat {
        if pos(1) then {
            lex_newline := 1
            if ="#line " then {
                tab(upto(&digits)) &
                lex_lineno := integer(tab(many(&digits))) &
                tab(upto('"')) &
                move(1) &
                lex_filename := tab(upto('"'))
                tab(0)
            }
        }

        # skip whitespace
        tab(many(' \t\f\r'))
        lex_coord_pos := &pos

        # check if EOL
        if pos(0) then {
            &subject := lex_nextline(getline) | fail
            next
        }

        # check if comment
        if ="#" then {
            tab(0)
            next
        }

        # check if identifier
        if str := tab(many(let_und)) then {
            str ||:= tab(many(let_und_dig))
        
            # check if reserved word
            if ptok := do_reserveds(str) then {
                suspend ptok
                next
            }
            ptok := lex_IDENT
            ptok.str := str
            suspend ptok
            next
        }

        # check if int lit  (digit or radix)
        # check if digit
        if str := tab(many(&digits)) then {
            sym := lex_INTLIT
            if str ||:= =("r"|"R") then { # radix
                str ||:= tab(many(let_dig)) |
                    lex_error("invalid integer literal")
                ptok := sym
                ptok.str := str
                suspend ptok
                next
            }

            # check if real lit
            if str ||:= ="." then {
                str ||:= tab(many(&digits))
                sym := lex_REALLIT
            }

            if str ||:= =("e"|"E") then { # exponent lit
                str ||:= =("+"|"-")
                str ||:= tab(many(&digits)) | lex_error("invalid real literal")
                sym := lex_REALLIT
            }
            ptok := sym
            ptok.str := str
            suspend ptok
            next
        }

        # the following special cases ".123" as a real.
        if str <- ="." & str ||:= tab(many(&digits)) then {
            sym := lex_REALLIT
            if str ||:= =("e"|"E") then { # exponent lit
                str ||:= =("+"|"-")
                str ||:= tab(many(&digits)) | lex_error("invalid real literal")
            }
            ptok := sym
            ptok.str := str
            suspend ptok
            next
        }

        # check if op
        if ptok := do_ops() then {
            suspend ptok
            next
        }

        # check if string lit
        if str := lex_quoted("\"", getline) then {
            ptok := lex_STRINGLIT
            ptok.str := str
            suspend ptok
            next
        }

        # check if raw literal
        if str := lex_rawquoted(getline) then {
            ptok := lex_STRINGLIT
            ptok.str := str
            suspend ptok
            next
        }

#        # check if cset -- DISABLED FOR GOALDI
#        if str := lex_quoted("'", getline) then {
#            ptok := lex_CSETLIT
#            ptok.str := str
#            suspend ptok
#            next
#        }

        # default
        lex_error("invalid character: " || image(&subject[&pos]))
    }
end

procedure lex_error(msg)
    if \parse_tok_rec then {
        stop("File ", lex_filename, ": ", "Line ", lex_lineno, " # ", msg)
    } else {
        stop(msg)
    }
end

procedure lex_nextline(getline)
    local s

    s := @getline | fail
    lex_lineno +:= 1
    return s
end

procedure lex_rawquoted(getline)
    local str
    if ="`" then {
        str := ""
        repeat {
            str ||:= tab(upto('`') | 0)
            if ='`' then {
                return str
            }
            str ||:= "\n"
            &subject := lex_nextline(getline) |
                lex_error("unclosed raw literal")
        }
    }
    fail
end

procedure lex_quoted(delim, getline) 
    local str, dset, hex, h, ch, octal, o, u
    static lookup
    initial {
        lookup := table()
        lookup["b"] := "\b"
        lookup["d"] := "\d"
        lookup["e"] := "\e"
        lookup["f"] := "\f"
        lookup["l"] := "\l"
        lookup["n"] := "\n"
        lookup["r"] := "\r"
        lookup["t"] := "\t"
        lookup["v"] := "\v"
        lookup["'"] := "\'"
        lookup["\""] := "\""
        lookup["\\"] := "\\"
    }
    if =delim then {
        str := ""
        dset := '\\' ++ delim
        repeat {
            if str ||:= tab(upto(dset)) then {
                if =delim then {
                    return str
                }
                ="\\" | runerr(500, lex_lineno)
                if ="u" | ="U" then {
                    if hex:= tab(many('0123456789abcdefABCDEF',,,&pos+8|0)) then {
                        u := "16r" || hex
                        str ||:= lex_utf8(u)
                        next
                    } else {
                        str ||:= "\\u"
                        next
                    }
                } else if ="x" | ="X" then {
                    if hex:= tab(many('0123456789abcdefABCDEF',,,&pos+2|0)) then {
                        h := "16r" || hex
                        str ||:= lex_utf8(h)
                        next
                    } else {
                        str ||:= "\\x"
                        next
                    }
                } else if ="^" then {
                    if ch := move(1) then {
                        str ||:= char(iand(ord(ch),16r1f))
                        next
                    } else {
                        str ||:= "\\^"
                        next
                    }   
                } else if octal := tab(many('01234567',,,&pos+3|0)) then {
                    o := "8r" || octal
                    str ||:= lex_utf8(o)
                    next
                } else if ch := move(1) then {
                    str ||:= (\lookup[ch] | ch)
                    next
                } else {
                    lex_error("unclosed quote")
                }
            } else {
#                Icon-style multi-line literals continued by "_\n" DISABLED
#                every (str ||:= tab(upto('_'))) do {
#                    if pos(-1) then {
#                        &subject := lex_nextline(getline) | fail
#                        tab(many(' \t\f'))
#                        break next
#                    } else {
#                        str ||:= move(1)
#                    }
#                }
                lex_error("unclosed quote")
            }
            runerr(500, lex_lineno)
        }
        runerr(500, lex_lineno)
    }
    fail
end

procedure lex_utf8(u)  #: encode Unicode character u as UTF-8 string
    local n
    n := integer(u)
    if n < 16r80 then {
        return char(n)
    }
    if n < 16r800 then {
        return char(16rC0 + ishift(n, -6)) || char(16r80 + iand(n, 16r3F))
    }
    if n < 16r10000 then {
        return char(16rE0 + ishift(n, -12)) ||
        char(16r80 + iand(ishift(n, -6), 16r3F)) ||
        char(16r80 + iand(n, 16r3F))
    }
    if n < 16r110000 then {
        return char(16rF0 + ishift(n, -18)) ||
        char(16r80 + iand(ishift(n, -12), 16r3F)) ||
        char(16r80 + iand(ishift(n, -6), 16r3F)) ||
        char(16r80 + iand(n, 16r3F))
    }
    lex_error("Unicode value too large: \u" || u)
    fail
end
