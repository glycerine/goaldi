#SRC: written for Goaldi
#
#  Map operations
#
#  Dependent on underlying implementation in terms of map generation order.
#  Final portion is also dependent on random number implementation.

procedure main()
	local t, c, i, k, kv
	t := map()
	println("\t\t\t\t", type(t), t, *t, image(t))
	ck(t)
	every i := !4 do {
		t[i] := "abcd"[i]
		ck(t)
	}
	every c := !"efgh" do {
		t[toupper(c)] := c
		ck(t)
	}
	every i := 5-!4 do {
		t[i] := "wxyz"[i]
		ck(t)
	}
	println("\t\t\t\t", type(t), t, *t, image(t))
	ck(copy(t).delete(2).delete("G"))
	ck(t) # should be unchanged
	println("\t\t\t\t", type(t), t, *t, image(t))
	every k := 3 | "G" | 1 | "H" | 2 | 4 | "F" | "E" do {
		t.delete(k)
		ck(t)
	}
	println("\t\t\t\t", type(t), t, *t, image(t))

	# randomness
	every t[!4 | !"EFGH"] := ?"abcdefghijklmnopqrstuvwxyz"
	ck(t)
	writes("\t\t\t")
	every !12 do
		kv := ?t & writes(" ", kv.key, ":", kv.value)
	write()
end

procedure ck(t)
	local k, kv
	writes(*t, " ")
	every k := !"1234" | !4 | !"EFGH" do {
		writes(t.member(k) | "-")
	}
	every writes(" " | t[!4 | !"EFGH"])
	writes(" ")
	every kv := !t do
		writes(" ", kv.key, ":", kv.value)
	write()
end
