#  SRC: written for Goaldi
#  i/o test

procedure main()
	local f, s

	# simple reading
	write("a. ", read())
	write("b. ", @&stdin)
	write("c. ", !&stdin)
	every write("d. ", !&stdin \ 3)

	# open and read, including binary
	f := open("io.dat")
	write("e. ", @f)
	write("f. ", !f)
	write("g. ", f.read())
	write("h. ", image(f.readb(3)))
	write("i. ", image(f.readb(4)))
	write("j. ", image(f.readb(5)))
	f.close()

	# open and write, including binary writes to make CRLF and raw CR
	write()
	f := open("io1.tmp", "w")
	f.write("first line normal")
	f.write("raw\r    CR embedded in this line")
	f.writes("line ending in CRLF\r\n")
	f.write("another normal line")
	f.print(12, 34, 5)	# spaces, no newline
	f.println(6, 78, 90)	# adjoins previous, spaces, newline
	f.flush()
	# extended character sets
	#%#% when Unicode literals work properly,
	#%#% change first of each pair to f.writes(...)
	f.writeb("Latin1: naïve Häagen-Dazs Frusen Glädjé\n")
	f.writeb("Latin1: na\xC3\xAFve H\xC3\xA4agen-Dazs Frusen Gl\xC3\xA4dj\xC3\xA9\n")
	f.writeb("Unicode:  ♠ A K Q  ♥ A K Q  ♦ A K Q J  ♣ K J 9\n")
	f.writeb("Unicode:  \xE2\x99\xA0 A K Q  \xE2\x99\xA5 A K Q  \xE2\x99\xA6 A K Q J  \xE2\x99\xA3 K J 9\n")
	f.write("another normal line")
	f.writes("unterminated line")
	f.close()

	# read back that file as normal text
	f := open("io1.tmp")
	while show(@f)
	f.close()

	# read back that file in binary
	# (non-ASCII chars look strange because UTF-8 is not decoded)
	write()
	f := open("io1.tmp")
	show(f.readb(1000))
	f.close()

	# test failure to open
	open("/no/such/file/exists", "f") | write("[open failed as expected]")

	# test bidirectional appending I/O
	write()
	open("io2.tmp", "w").write("abcde\nfghij").close()
	f := open("io2.tmp", "rwa")
	write("skip: ", @f)
	f.write("klmno")
	write("skip: ", @f)
	f.write("pqrst")
	f.close()
	f := open("io2.tmp")
	every write("reread: ", !f)
	f.close()

end

procedure show(s)
	write(*s, ": ", image(s))
	return
end
