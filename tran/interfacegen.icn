#  interfacegen.icn -- utility to create bytecode emitter routines

procedure main()
    write("#  AUTOMATICALLY GENERATED FILE -- DO NOT EDIT!")
    keywords()
    operators()
    methodrefs()
    methods()
    fieldrefs()
end

procedure keywords()
    local keys, t, i

    keys := [
	# field, type, [name]		(name defaults to field if not present)
	[ "allocated", "Ljcon/kZeroes;" ],
	[ "ascii", "Ljcon/kValue;" ],
	[ "clock", "Ljcon/vProc;" ],
	[ "col", "Ljcon/kPaired;" ],
	[ "collections", "Ljcon/kZeroes;" ],
	[ "control", "Ljcon/kValue;" ],
	[ "cset", "Ljcon/kValue;" ],
	[ "current", "Ljcon/kValue;" ],
	[ "date", "Ljcon/vProc;" ],
	[ "dateline", "Ljcon/vProc;" ],
	[ "digits", "Ljcon/kValue;" ],
	[ "dump", "Ljcon/kCounter;" ],
	[ "e", "Ljcon/kValue;" ],
	[ "error", "Ljcon/kCounter;" ],
	[ "errornumber", "Ljcon/kValue;" ],
	[ "errortext", "Ljcon/kValue;" ],
	[ "errorvalue", "Ljcon/kValue;" ],
	[ "errout", "Ljcon/kValue;" ],
	[ "fail", "Ljcon/kValue;" ],
	[ "features", "Ljcon/vProc;" ],
	[ "host", "Ljcon/vProc;" ],
	[ "input", "Ljcon/kValue;" ],
	[ "interval", "Ljcon/kValue;" ],
	[ "lcase", "Ljcon/kValue;" ],
	[ "ldrag", "Ljcon/kValue;" ],
	[ "letters", "Ljcon/kValue;" ],
	[ "level", "Ljcon/vProc;" ],
	[ "lpress", "Ljcon/kValue;" ],
	[ "lrelease", "Ljcon/kValue;" ],
	[ "main", "Ljcon/kValue;" ],
	[ "mdrag", "Ljcon/kValue;" ],
	[ "meta", "Ljcon/kValue;" ],
	[ "mpress", "Ljcon/kValue;" ],
	[ "mrelease", "Ljcon/kValue;" ],
	[ "nulll", "Ljcon/kValue;", "null" ],	# note third element
	[ "output", "Ljcon/kValue;" ],
	[ "phi", "Ljcon/kValue;" ],
	[ "pi", "Ljcon/kValue;" ],
	[ "pos", "Ljcon/k$pos;" ],
	[ "progname", "Ljcon/kValue;" ],
	[ "random", "Ljcon/k$random;" ],
	[ "rdrag", "Ljcon/kValue;" ],
	[ "regions", "Ljcon/kZeroes;" ],
	[ "resize", "Ljcon/kValue;" ],
	[ "row", "Ljcon/kPaired;" ],
	[ "rpress", "Ljcon/kValue;" ],
	[ "rrelease", "Ljcon/kValue;" ],
	[ "shift", "Ljcon/kValue;" ],
	[ "source", "Ljcon/vProc;" ],
	[ "storage", "Ljcon/kZeroes;" ],
	[ "subject", "Ljcon/k$subject;" ],
	[ "time", "Ljcon/k$time;" ],
	[ "trace", "Ljcon/kCounter;" ],
	[ "ucase", "Ljcon/kValue;" ],
	[ "version", "Ljcon/kValue;" ],
	[ "window", "Ljcon/k$window;" ],
	[ "x", "Ljcon/kPaired;" ],
	[ "y", "Ljcon/kPaired;" ],
    ]
    write("procedure bc_keywords(name)")
    write("\tstatic t")
    write("\tinitial {")
    write("\t\tt := table()")
    every i := \!keys do {
	write("\t\tt[", image(\i[3]|i[1]), "] := [ ", image(i[1]), ", ", image(i[2]), "]")
    }
    write("\t}")
    write("\treturn t[name]")
    write("end")
end

procedure operators()
    local o, ops, signature

    ops := [

	# arity,  op, method name,  return type

	[ 1,     ".", "Deref",      "jcon.vValue"      ],
	[ 2,    ":=", "Assign",     "jcon.vVariable"   ],
	[ 2,   ":=:", "Swap",       "jcon.vVariable"   ],
	[ 2,    ":?", "SubjAssign", "jcon.vVariable"   ],
	[ 2,    "<-", "RevAssign",  "jcon.vDescriptor" ],
	[ 2,   "<->", "RevSwap",    "jcon.vDescriptor" ],

	[ 1,     "#", "Limit",      "jcon.vNumeric"    ],
	[ 2,     "&", "Conjunction","jcon.vDescriptor" ],
	[ 2,     "!", "ProcessArgs","jcon.vDescriptor" ],
	[ 2,     "@", "Activate",   "jcon.vDescriptor" ],
	[ 3,   "...", "ToBy",       "jcon.vDescriptor" ],

	[ 1,     "+", "Numerate",   "jcon.vNumeric"    ],
	[ 1,     "-", "Negate",     "jcon.vNumeric"    ],
	[ 1,     "*", "Size",       "jcon.vInteger"    ],
	[ 1,     "~", "Complement", "jcon.vCset"       ],
	[ 1,     "^", "Refresh",    "jcon.vCoexp"      ],
	[ 1,     "=", "TabMatch",   "jcon.vDescriptor" ],

	[ 1,     "/", "IsNull",     "jcon.vDescriptor" ],
	[ 1,    "\\", "IsntNull",   "jcon.vDescriptor" ],

	[ 1,     "?", "Select",     "jcon.vDescriptor", ["Val","jcon.vValue"] ],
	[ 1,     "!", "Bang",       "jcon.vDescriptor",
						["Val","jcon.vDescriptor"] ],

	[ 2,    "[]", "Index",      "jcon.vDescriptor", ["Val","jcon.vValue"] ],
	[ 3,   "[:]", "Section",    "jcon.vDescriptor", ["Val","jcon.vValue"] ],
	[ 3,  "[+:]", "SectPlus",   "jcon.vDescriptor", ["Val","jcon.vValue"] ],
	[ 3,  "[-:]", "SectMinus",  "jcon.vDescriptor", ["Val","jcon.vValue"] ],

	[ 2,     "+", "Add",        "jcon.vNumeric"    ],
	[ 2,     "-", "Sub",        "jcon.vNumeric"    ],
	[ 2,     "*", "Mul",        "jcon.vNumeric"    ],
	[ 2,     "/", "Div",        "jcon.vNumeric"    ],
	[ 2,     "%", "Mod",        "jcon.vNumeric"    ],
	[ 2,     "^", "Power",      "jcon.vNumeric"    ],

	[ 2,     "<", "NLess",      "jcon.vNumeric"    ],
	[ 2,    "<=", "NLessEq",    "jcon.vNumeric"    ],
	[ 2,     "=", "NEqual",     "jcon.vNumeric"    ],
	[ 2,    "~=", "NUnequal",   "jcon.vNumeric"    ],
	[ 2,    ">=", "NGreaterEq", "jcon.vNumeric"    ],
	[ 2,     ">", "NGreater",   "jcon.vNumeric"    ],

	[ 2,    "<<", "LLess",      "jcon.vString"     ],
	[ 2,   "<<=", "LLessEq",    "jcon.vString"     ],
	[ 2,    "==", "LEqual",     "jcon.vString"     ],
	[ 2,   "~==", "LUnequal",   "jcon.vString"     ],
	[ 2,   ">>=", "LGreaterEq", "jcon.vString"     ],
	[ 2,    ">>", "LGreater",   "jcon.vString"     ],

	[ 2,   "===", "VEqual",     "jcon.vValue"      ],
	[ 2,  "~===", "VUnequal",   "jcon.vValue"      ],

	[ 2,    "||", "Concat",     "jcon.vString"     ],
	[ 2,   "|||", "ListConcat", "jcon.vList"       ],

	[ 2,    "**", "Intersect",  "jcon.vValue"      ],
	[ 2,    "++", "Union",      "jcon.vValue"      ],
	[ 2,    "--", "Diff",       "jcon.vValue"      ]
    ]

    op_methodrefs(ops, "op_methodref", "", "jcon/vDescriptor", &null)
    op_methodrefs(ops, "trampoline_op_methodref",
                       "Ljava/lang/String;ILjcon/vDescriptor;",
		       "jcon/iTrampoline", "trampoline")
end

procedure op_methodrefs(ops, fn, prefix, ty, trampoline)
    local o

    write("procedure bc_", fn, "(c, name, arity, rval)")
    every o := !ops do {
	if /trampoline | (o[2] ~== "@") then {
	    op_select(o, prefix, ty)
	} else {
	    op_select(o, "Ljava/lang/String;ILjava/lang/String;Ljcon/vDescriptor;", ty)
	}
    }
    write("\trunerr(500, name || arity)")
    write("end")
end

procedure op_select(o, prefix, ty)
    local signature

	writes("\tif ",
	      "arity = ", o[1], " & ",
	      "name == ", image(o[2]),
	      " then return ")
        if \o[5] then {
	    signature := "(" || prefix
	    every 1 to o[1]-1 do {
	        signature ||:= "Ljcon/vDescriptor;"
	    }
	    signature ||:= ")"
	    signature ||:= "L" || map(o[5][2], ".", "/") || ";"
	    writes("if \\rval then ")
	    writes("j_create_methodref(c, ",
	           image(o[3] || o[5][1]), ", ",
	           image(signature), ", ",
	           image(ty), ")"
	           )
	    writes(" else ")
	}
	signature := "(" || prefix
	every 1 to o[1]-1 do {
	    signature ||:= "Ljcon/vDescriptor;"
	}
	signature ||:= ")"
	signature ||:= "L" || map(o[4], ".", "/") || ";"
	writes("j_create_methodref(c, ",
	       image(o[3]), ", ",
	       image(signature), ", ",
	       image(ty), ")"
	       )
	write()
end

procedure methodrefs()
    local m, def, i, args

    m := [
	["<init>", "()V", &null, "init"],
	["<init>", "([Ljcon/vDescriptor;)V", &null, "initV"],
	["<init>", "([Ljcon/vDescriptor;I)V", &null, "initVI"],
	["Assign", "(Ljcon/vDescriptor;)Ljcon/vVariable;","jcon/vDescriptor"],
	["Call", "([Ljcon/vDescriptor;)Ljcon/vDescriptor;",
             "jcon/vDescriptor",  "CallV"],
	["New", "()Ljcon/vNull;", "jcon/vNull", "New_vNull"],
	["New", "(J)Ljcon/vInteger;", "jcon/vInteger",
	     "New_vInteger"],
	["New", "(Ljava/lang/String;)Ljcon/vBigInt;", "jcon/vBigInt",
	     "New_vBigInt"],
	["New", "(Ljcon/vClosure;)Ljcon/vCoexp;", "jcon/vCoexp","New_vCoexp"],
	["New", "(Ljava/lang/String;)Ljcon/vCset;","jcon/vCset","New_vCset"],
	["New", "(Ljava/lang/String;)Ljcon/vReal;","jcon/vReal","New_vReal"],
	["New", "(Ljava/lang/String;Ljcon/vDescriptor;)Ljcon/vSimpleVar;",
             "jcon/vSimpleVar", "New_vSimpleVar_Assign"],
	["New", "(Ljava/lang/String;)Ljcon/vSimpleVar;", "jcon/vSimpleVar",
             "New_vSimpleVar"],
	["NewLocalUnstacked",
	     "(Ljava/lang/String;Ljcon/vDescriptor;)Ljcon/vLocalVar;",
             "jcon/vLocalVar", "New_Local_Assign_Unstacked"],
	["NewLocal","(Ljava/lang/String;Ljcon/vDescriptor;)Ljcon/vLocalVar;",
             "jcon/vLocalVar", "New_Local_Assign"],
	["NewLocal", "(Ljava/lang/String;)Ljcon/vLocalVar;",
	     "jcon/vLocalVar", "New_Local"],
	["New", "(Ljava/lang/String;)Ljcon/vString;", "jcon/vString",
             "New_vString"],
	["New", "([Ljcon/vDescriptor;)Ljcon/vList;", "jcon/vList",
             "New_vList"],
	["Free", "(Ljcon/vLocalVar;)V", "jcon/vLocalVar"],
	["cofail", "()V", "jcon/vCoexp"],
	["cofail", "(Ljava/lang/String;ILjava/lang/String;Ljcon/vCoexp;)V", "jcon/iTrampoline", "trampoline_cofail"],
	["copy", "(I)Ljcon/vClosure;", &null],
	["coret", "(Ljcon/vDescriptor;)V", "jcon/vCoexp"],
	["coret", "(Ljava/lang/String;ILjava/lang/String;Ljcon/vCoexp;Ljcon/vDescriptor;)V", "jcon/iTrampoline", "trampoline_coret"],
	["create", "()V", "jcon/vCoexp"],
	["createVars", "()V", &null],
	["declareDebugging", "()V", "jcon/iEnv"],
	["declareGlobal", "(Ljava/lang/String;)V", "jcon/iEnv"],
	["declareInvoke", "(Ljava/lang/String;)V", "jcon/iEnv"],
	["declareInvokeAll", "()V", "jcon/iEnv"],
	["declareProcedure", "(Ljava/lang/String;Ljcon/vProc;I)V",
             "jcon/iEnv"],
	["declareRecord", "(Ljava/lang/String;[Ljava/lang/String;)V",
             "jcon/iEnv"],
	["Deref", "()Ljcon/vValue;", "jcon/vDescriptor"],
	["DerefLocal", "()Ljcon/vDescriptor;", "jcon/vDescriptor"],
	["Return", "()Ljcon/vDescriptor;", "jcon/vDescriptor"],
	["Field", "(Ljava/lang/String;)Ljcon/vVariable;","jcon/vDescriptor"],
	["Field",
  "(Ljava/lang/String;ILjcon/vDescriptor;Ljava/lang/String;)Ljcon/vVariable;",
	     "jcon/iTrampoline", "trampoline_Field"],
	["error", "(I)V", "jcon/iRuntime"],
	["link", "(Ljcon/iFile;Ljava/lang/String;)V", "jcon/iInterface"],
	["marshal", "([Ljcon/vDescriptor;I)Ljcon/vList;", "jcon/iInterface"],
	["propagate", "(Ljava/lang/String;[Ljcon/vDescriptor;)V",
	     "jcon/iError"],
	["resolve", "(Ljava/lang/String;)Ljcon/vVariable;", "jcon/iEnv"],
	["resolveKey", "(Ljava/lang/String;)Ljcon/vProc;", "jcon/iEnv"],
	["resolveProc", "(Ljava/lang/String;I)Ljcon/vDescriptor;",
             "jcon/iEnv"],
	["Resume", "()Ljcon/vDescriptor;", "jcon/vDescriptor"],
	["Resume",
	     "(Ljava/lang/String;ILjcon/vDescriptor;)Ljcon/vDescriptor;",
	     "jcon/iTrampoline", "trampoline_Resume"],
	["undeclared", "(Ljava/lang/String;)V", "jcon/iEnv"],
	["undeclared",
	     "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V",
	     "jcon/iEnv", "announce_undeclared"]
        ]
    def := [ "name", "type", "class" ]
    every gen_procedure(!m, def, "methodref")

    write("procedure bc_CallN_methodref(c, N)")
    write("\treturn case N of {")
    args := ""
    every i := 0 to 9 do {
        write("\t", i, ": j_create_methodref(c, \"Call\", \"(", args,
              ")Ljcon/vDescriptor;\", \"jcon/vDescriptor\")")
        args ||:= "Ljcon/vDescriptor;"
    }
    write("\tdefault : runerr(500, N)")
    write("\t}")
    write("end")

    write("procedure bc_trampoline_CallN_methodref(c, N)")
    write("\treturn case N of {")
    args := ""
    every i := 0 to 9 do {
        write("\t", i, ": j_create_methodref(c, \"Call\", ",
	      "\"(Ljava/lang/String;ILjcon/vDescriptor;", args,
              ")Ljcon/vDescriptor;\", \"jcon/iTrampoline\")")
        args ||:= "Ljcon/vDescriptor;"
    }
    write("\tdefault : j_create_methodref(c, \"Call\", ",
          "\"(Ljava/lang/String;ILjcon/vDescriptor;[Ljcon/vDescriptor;)",
	  "Ljcon/vDescriptor;\", \"jcon/iTrampoline\")")
    write("\t}")
    write("end")

    write("procedure bc_initN_methodref(c, classname, N)")
    write("\treturn case N of {")
    args := ""
    every i := 0 to 9 do {
        write("\t", i, ": j_create_methodref(c, \"<init>\", \"(", args,
              ")V\", classname)")
        args ||:= "Ljcon/vDescriptor;"
    }
    write("\tdefault : runerr(500, N)")
    write("\t}")
    write("end")
end

procedure methods()
    local i

    write("procedure bc_CallN_method(c, N)")
    write("\treturn case N of {")
    args := ""
    every i := 0 to 9 do {
        write("\t", i, ": j_create_method(c, 0, \"Call\", \"(", args,
              ")Ljcon/vDescriptor;\")")
        args ||:= "Ljcon/vDescriptor;"
    }
    write("\tdefault : runerr(500, N)")
    write("\t}")
    write("end")

    write("procedure bc_initN_method(c, N)")
    write("\treturn case N of {")
    args := ""
    every i := 0 to 9 do {
        write("\t", i, ": j_create_method(c, 0, \"<init>\", \"(", args,
              ")V\")")
        args ||:= "Ljcon/vDescriptor;"
    }
    write("\tdefault : runerr(500, N)")
    write("\t}")
    write("end")
end

procedure fieldrefs()
    local f, def

    f := [
        [ "PC", "I", &null],
        [ "arguments", "[Ljcon/vDescriptor;", "jcon/vClosure"],
        [ "retval", "Ljcon/vDescriptor;", "jcon/vClosure"],
        [ "refreshArray", "[Ljcon/vDescriptor;", &null],
        [ "refreshPC", "I", &null],
        [ "cur_coexp", "Ljcon/vCoexp;", "jcon/iEnv"],
        [ "file", "Ljava/lang/String;", "jcon/iTrace"],
        [ "line", "I", "jcon/iTrace"]
    ]
    def := [ "name", "type", "class" ]
    every gen_procedure(!f, def, "fieldref")
end

procedure gen_procedure(i, def, suffix)
    writes("procedure bc_", i[4] | i[1], "_", suffix, "(c")
    if /i[2] then writes(", ", def[2])
    if /i[3] then writes(", ", def[3])
    write(")")
    write("    return j_create_", suffix, "(c, ",
                          image(\i[1]) | def[1], ", ",
                          image(\i[2]) | def[2], ", ",
                          image(\i[3]) | def[3], ")")
    write("end")
end
