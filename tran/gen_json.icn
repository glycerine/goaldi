#  gen_json.icn -- create json output from intermediate representation.

procedure json_File(irgen, flagList)
    local p, flag, s

    flag := &null
    s := "["
    while p := @irgen do {
        if \flag then s ||:= ", "
	flag := "true"

	s ||:= json(p)
    }
    s ||:= "]"
    return s
end

procedure json_list(p)
	local s, flag, i

	s := "["
	flag := &null
	every i := !p do {
		if \flag then s ||:= ", "
		flag := "true"
		s ||:= json(i)
	}
	s ||:= "]"
	return s
end

procedure json_record(p)
	local s, flag, i, t

	s := "{"
	flag := &null
	every i := 1 to *p do {
		if \flag then s ||:= ", "
		flag := "true"
		name(p[i]) ? {
			tab(upto('.'))
			move(1)
			t := tab(0)
		}
		s ||:= image(t)
		s ||:= " : "
		s ||:= json(p[i])
	}
	s ||:= "}"
	return s
	
end

procedure json(p)
	if match("record", image(p)) & type(p) ~== "string" then {
		return json_record(p)
	} else {
		case type(p) of {
		"list": return json_list(p)
		default: return image(string(p))
		}
	}
end
