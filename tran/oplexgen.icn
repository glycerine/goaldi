#  oplexgen.icn -- utility that generates lexical analysis routines.

global primitives, reserveds, operators

procedure init_lex_tables()

    #Primitive Tokens
    primitives := [
               ["identifier",      "IDENT",     "be"],
               ["integer-literal", "INTLIT",    "be"],
               ["real-literal",    "REALLIT",   "be"],
               ["string-literal",  "STRINGLIT", "be"],
               ["cset-literal",    "CSETLIT",   "be"],
               ["end-of-file",     "EOFX",      "" ]]

    # Reserved Words
    reserveds  := [
               ["break",           "BREAK",     "be"],
               ["by",              "BY",        ""  ],
               ["case",            "CASE",      "b" ],
               ["create",          "CREATE",    "b" ],
               ["default",         "DEFAULT",   "b" ],
               ["do",              "DO",        ""  ],
               ["else",            "ELSE",      ""  ],
               ["end",             "END",       "b" ],
               ["every",           "EVERY",     "b" ],
               ["fail",            "FAIL",      "be"],
               ["global",          "GLOBAL",    ""  ],
               ["if",              "IF",        "b" ],
               ["initial",         "INITIAL",   "b" ],
               ["invocable",       "INVOCABLE", ""  ],
               ["link",            "LINK",      ""  ],
               ["local",           "LOCAL",     "b" ],
               ["next",            "NEXT",      "be"],
               ["not",             "NOT",       "b" ],
               ["of",              "OF",        ""  ],
               ["procedure",       "PROCEDURE", ""  ],
               ["record",          "RECORD",    ""  ],
               ["repeat",          "REPEAT",    "b" ],
               ["return",          "RETURN",    "be"],
               ["static",          "STATIC",    "b" ],
               ["suspend",         "SUSPEND",   "be"],
               ["then",            "THEN",      ""  ],
               ["to",              "TO",        ""  ],
               ["until",           "UNTIL",     "b" ],
               ["while",           "WHILE",     "b" ]]

    # Operators
    operators  := [
               [":=",              "ASSIGN",    ""  ],
               ["@",               "AT",        "b" ],
               ["@:=",             "AUGAT",    ""  ],
               ["&:=",             "AUGAND",    ""  ],
               ["=:=",             "AUGNMEQ",     ""  ],
               ["===:=",           "AUGEQUIV",    ""  ],
               [">=:=",            "AUGNMGE",     ""  ],
               [">:=",             "AUGNMGT",     ""  ],
               ["<=:=",            "AUGNMLE",     ""  ],
               ["<:=",             "AUGNMLT",     ""  ],
               ["~=:=",            "AUGNMNE",     ""  ],
               ["~===:=",          "AUGNEQUIV",   ""  ],
               ["==:=",            "AUGSEQ",    ""  ],
               [">>=:=",           "AUGSGE",    ""  ],
               [">>:=",            "AUGSGT",    ""  ],
               ["<<=:=",           "AUGSLE",    ""  ],
               ["<<:=",            "AUGSLT",    ""  ],
               ["~==:=",           "AUGSNE",    ""  ],
               ["\\",              "BACKSLASH", "b" ],
               ["!",               "BANG",      "b" ],
               ["|",               "BAR",       "b" ],
               ["^",               "CARET",     "b" ],
               ["^:=",             "AUGCARET", "b" ],
               [":",               "COLON",     ""  ],
               [",",               "COMMA",     ""  ],
               ["||",              "CONCAT",    "b" ],
               ["||:=",            "AUGCONCAT",""  ],
               ["&",               "AND",   "b" ],
               [".",               "DOT",       "b" ],
               ["--",              "DIFF",      "b" ],
               ["--:=",            "AUGDIFF",  ""  ],
               ["===",             "EQUIV",     "b" ],
               ["**",              "INTER",     "b" ],
               ["**:=",            "AUGINTER", ""  ],
               ["{",               "LBRACE",    "b" ],
               ["[",               "LBRACK",    "b" ],
               ["[:",              "LCOMP",     "b" ],
               ["|||",             "LCONCAT",   "b" ],
               ["|||:=",           "AUGLCONCAT","" ],
               ["==",              "SEQ",     "b" ],
               [">>=",             "SGE",     ""  ],
               [">>",              "SGT",     ""  ],
               ["<<=",             "SLE",     ""  ],
               ["<<",              "SLT",     ""  ],
               ["~==",             "SNE",     "b" ],
               ["(",               "LPAREN",    "b" ],
               ["-:",              "MCOLON",    ""  ],
               ["-",               "MINUS",     "b" ],
               ["-:=",             "AUGMINUS", ""  ],
               ["%",               "MOD",       ""  ],
               ["%:=",             "AUGMOD",   ""  ],
               ["~===",            "NEQUIV",  "b" ],
               ["=",               "NMEQ",     "b" ],
               [">=",              "NMGE",     ""  ],
               [">",               "NMGT",     ""  ],
               ["<=",              "NMLE",     ""  ],
               ["<",               "NMLT",     ""  ],
               ["~=",              "NMNE",     "b" ],
               ["+:",              "PCOLON",    ""  ],
               ["+",               "PLUS",      "b" ],
               ["+:=",             "AUGPLUS",  ""  ],
               ["?",               "QMARK",     "b" ],
               ["<-",              "REVASSIGN", ""  ],
               ["<->",             "REVSWAP",   ""  ],
               ["}",               "RBRACE",    "e" ],
               ["]",               "RBRACK",    "e" ],
               [":]",              "RCOMP",     "e" ],
               [")",               "RPAREN",    "e" ],
               [";",               "SEMICOL",   ""  ],
               ["?:=",             "AUGQMARK",  ""  ],
               ["/",               "SLASH",     "b" ],
               ["/:=",             "AUGSLASH", ""  ],
               ["*",               "STAR",      "b" ],
               ["*:=",             "AUGSTAR",  ""  ],
               [":=:",             "SWAP",      ""  ],
               ["~",               "TILDE",     "b" ],
               ["++",              "UNION",     "b" ],
               ["++:=",            "AUGUNION", ""  ],
               ["$(",              "LBRACE",    "b" ],
               ["$)",              "RBRACE",    "e" ],
               ["$<",              "LBRACK",    "b" ],
               ["$>",              "RBRACK",    "e" ],
               ["$",               "RHSARG",    "b" ],
               ["%$(",             "BEGGLOB",   "b" ],
               ["%$)",             "ENDGLOB",   "e" ],
               ["%{",              "BEGGLOB",   "b" ],
               ["%}",              "ENDGLOB",   "e" ],
               ["%%",              "NEWSECT",   "be"]]
end

procedure main(L)
    local toks, prim, actual, token, res, op, elem

    write("#  AUTOMATICALLY GENERATED FILE -- DO NOT EDIT!")

    init_lex_tables()
    toks := table()

    every elem := (!primitives | !reserveds | !operators) do {
        actual := elem[1]
        token := elem[2]
        if /toks[token] then {
        toks[token] := actual
        write("global lex_", token)
        }
    }

    write("global lex_beginner_set")
    write("global lex_ender_set")

    write("procedure initialize()")
    every elem := (!primitives | !reserveds | !operators) do {
        actual := elem[1]
        token := elem[2]
        if toks[token] == actual then {
            write("\tlex_", token, ":= lex_TOK(", image(token), ",",
        	  image(actual), ")")
        }
    }

    write("\tlex_beginner_set := set()")
    write("\tlex_ender_set := set()")
    every elem := !primitives | !reserveds | !operators do {
        if find("b", elem[3]) then {
            write("\tinsert(lex_beginner_set, lex_", elem[2], ")")
        }
        if find("e", elem[3]) then {
            write("\tinsert(lex_ender_set, lex_", elem[2], ")")
        }
    }
    write("end # end initialize")

    write()
    write("procedure do_reserveds(str)")
    write("\tstatic reserved_sym_tbl")
    write("\tinitial {")
    write("\t\treserved_sym_tbl := table(&null)")
    lexgen_reserveds()
    write("\t}")
    write("\t return \\reserved_sym_tbl[str]")
    write("\tfail")
    write("end")

    write("procedure do_ops()")
    lexgen_tree()
    write("\tfail")
    write("end")
end

procedure lexgen_reserveds()
    local l, res, actual, token, i

    l := []
    every 1 to 10 do put(l, [])
    every res := !reserveds do {
        actual := res[1]
        token := res[2]
        put(l[*actual], res)
    }
    every i := !l[10 to 1 by -1] do {
        write("\t\treserved_sym_tbl[", image(i[1]), "] := lex_", i[2])
    }
end

record node(actual, token, t)

procedure lexgen_tree()
    local t, op, actual, token

    t := node(&null, &null, table())
    every op := !operators do {
        actual := op[1]
        token := op[2]
        buildtree(actual, "", token, t)
    }
    optimize_tree(t)
    dotree(t, "\t")
end

procedure optimize_tree(t)
    local changes, i, s, j

    changes := 1
    while \changes do {
        changes := &null
        every i := key(t.t) do {
            s := t.t[i]
            if /s.token then {
                changes := 1
                delete(t.t, i)
                every j := key(s.t) do {
                    t.t[i || j] := s.t[j]
                }
            }
        }
    }
    every i := key(t.t) do {
        optimize_tree(t.t[i])
    }
end

procedure dotree(t, indent)
    local i

    every i := key(t.t) do {
        write(indent, "if =", image(i), " then { # ", t.actual || i)
        dotree(t.t[i], indent || "  ")
        write(indent, "}")
    }
    if \t.token then {
        writes(indent)
        if *t.t > 0 then {
            writes("else ")
        }
        write("{ return ", t.token, " }")
    }
end

procedure buildtree(a, sofar, token, t)
    t.actual := sofar
    if a == "" then {
        t.token := "lex_" || token
        return
    }
    /t.t[a[1]] := node(&null, &null, table())
    buildtree(a[2:0], sofar || a[1], token, t.t[a[1]])
end
